const request = require('request-promise');

class pterodactylApi {
    /**
     * API Interface Constructor
     * @constructor
     * @param {String} apiURL - Base API URL
     * @param {String} apiToken - API token
     */
    constructor(apiURL, apiToken) {
        if (!apiURL || !apiToken) throw new Error('You must pass a url and API key to the constructor!');
        this.url = apiURL;
        this.token = apiToken;
        this.header = {
            auth: {
                bearer: this.token
            },
            'Content-Type': 'application/json',
            'Accept': 'application/vnd.pterodactyl.v1+json'
        };
    }

    /* User Functions */

    /**
     * Get all users
     */
    getUsers() {
        return new Promise(async (resolve, reject) => {
            const url = this.url + '/api/application/users';
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body.data);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Fetch a single User
     * @async
     * @param {String} id - ID of the user to fetch
     * @returns {PTUser?} - User Object
     * @throws {Error} - Any errors that happen
     */
    getUser(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('You mast pass a user ID!'));
            const url = `${this.url}/api/application/users/${id}`;
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 404) resolve(null);
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Get a single user by external ID
     * @async
     * @param {String} id - External ID of the user
     * @returns {PTUser?} - User
     * @throws {Error} - Any errors that occur
     */
    getUserByExternalId(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('You must specify an ID'));
            const url = `${this.url}/api/application/users/external/${id}`;
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 404) resolve(null);
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Creating a new User object
     * @async
     * @param {Object} user - User to add
     * @param {String} user.email - Email for new user
     * @param {String} user.username - Username for new user
     * @param {String} user.first_name - First name for new user
     * @param {String} user.last_name - Last name for new user
     * @param {String} [user.password] - Password for the new user
     * @param {Boolean} [user.root_admin=false] - Admin status for the new user
     * @param {String} [user.language] - Optional language for the new user
     * @param {String} [user.external_id] - New user's external ID
     * @returns {PTUser} New user
     */
    createUser(user) {
        return new Promise(async (resolve, reject) => {
            if (!user || !user.email || !user.username || !user.first_name || !user.last_name) reject(new Error('You must specify the user\'s email, username, and first and last names. If left blank, password will be generated by the server'));
            const url = this.url + '/api/application/users';
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    body: user,
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 422) reject(new Error(`Validation error on object ${user}`));
                if (resp.statusCode === 503) reject(new Error('Panel encountered an error while processing the request'));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body.id);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Update a User
     * @async
     * @param {String} - ID of user to update
     * @param {Object} user - New user object
     * @param {String} user.username - User's new username
     * @param {String} user.email - User's new email
     * @param {String} user.first_name - User's new first name
     * @param {String} user.last_name - User's new last name
     * @param {String} user.password - User's new password
     * @param {String} user.root_admin - User's admin status
     * @returns {PTUser} The updated user
     * @throws {Error} Any errors
     */
    updateUser(id, user) {
        return new Promise(async (resolve, reject) => {
            const url = `${this.url}/api/application/users/${id}`;
            try {
                const resp = await request.patch(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true,
                    body: user
                });
                if (resp.statusCode === 404) reject(new Error('Can\'t update non-existant user!'));
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Delete a User object
     * @async
     * @param {String} id ID of user to delete
     * @throws {Error} Any errors that occur
     */
    deleteUser(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a user ID'));
            const url = `${this.url}/api/application/users/${id}`;
            try {
                const resp = await request.delete(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /* Allocation Functions */

    /**
     * Get all allocations
     * @param {String} nodeId ID of node to get allocations for
     */
    getAllocations(nodeId) {
        return new Promise(async (resolve, reject) => {
            if (!nodeId) reject(new Error('Must specifiy a Node ID'));
            const url = this.url + '/api/application/nodes/' + nodeId + '/allocations';
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body.data);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Create an Allocation
     * @async
     * @param {String} ip Ip of the Allocation
     * @param {Number} nodeId IP of the node to allocate to
     * @param {Array} ports range of ports to allocate
     * @throws {Error} Any errors that occur
     */
    createAllocation(ip, ports, nodeId) {
        return new Promise(async (resolve, reject) => {
            if (!ip) reject(new Error('Must specifiy a IP Address'));
            if (!nodeId) reject(new Error('Must specifiy a Node ID'));
            const url = `${this.url}/api/application/nodes/${nodeId}/allocations`;
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ip: ip,
                        ports: ports
                    }),
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Delete a User object
     * @async
     * @param {String} nodeId IP of the node to allocate to
     * @throws {Error} Any errors that occur
     */
    deleteAllocation(nodeId, id) {
        return new Promise(async (resolve, reject) => {
            if (!nodeId) reject(new Error('Must specifiy a node ID'));
            if (!id) reject(new Error('Must specifiy a allocation ID'));
            const url = `${this.url}/api/application/nodes/${nodeId}/allocations/${id}`;
            try {
                const resp = await request.delete(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /* Server Functions */

    /**
     * Get all servers
     */
    getServers() {
        return new Promise(async (resolve, reject) => {
            const url = this.url + '/api/application/servers';
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body.data);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Fetch a single Server
     * @async
     * @param {String} id - ID of the server to fetch
     * @returns {PTUser?} - Server Object
     * @throws {Error} - Any errors that happen
     */
    getServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('You mast pass a server ID!'));
            const url = `${this.url}/api/application/servers/${id}`;
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 404) resolve(null);
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Get a single server by external ID
     * @async
     * @param {String} id - External ID of the server
     * @returns {PTUser?} - Server
     * @throws {Error} - Any errors that occur
     */
    getServerByExternalId(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('You must specify an ID'));
            const url = `${this.url}/api/application/servers/external/${id}`;
            try {
                const resp = await request.get(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 404) resolve(null);
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Update a Server
     * @async
     * @param {String} - ID of server to update
     * @param {Object} server - New server object
     * @param {String} server.name - Name for the server	
     * @param {String} server.user - ID of the user which the server belongs to	
     * @param {String} server.external_id - External ID of the server	
     * @param {String} server.description - Description of the server	
     * @returns {PTUser} The updated server
     * @throws {Error} Any errors
     */
    updateServer(id, server) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            if (!server || !server.name || !server.user) reject(new Error('Must specifiy a server name and user'));
            const url = `${this.url}/api/application/servers/${id}/details`;
            try {
                const resp = await request.patch(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true,
                    body: server
                });
                if (resp.statusCode === 404) reject(new Error('Can\'t update non-existant server!'));
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Update build
     * @async
     * @param {String} - ID of server to update
     * @param {Object} server.allocation - ID of primary allocation	
     * @param {String} server.memory - The maximum amount of memory allowed for this container. Setting this to 0 will allow unlimited memory in a container.		
     * @param {String} server.swap - Setting this to 0 will disable swap space on this server. Setting to -1 will allow unlimited swap.		
     * @param {String} server.io - IO performance of this server relative to other running containers	
     * @param {String} server.cpu - Each physical core on the system is considered to be 100%. Setting this value to 0 will allow a server to use CPU time without restrictions.	
     * @param {String} server.disk - This server will not be allowed to boot if it is using more than this amount of space. If a server goes over this limit while running it will be safely stopped and locked until enough space is available. Set to 0 to allow unlimited disk usage.	
     * @param {String} server.threads - Enter the specific CPU cores that this process can run on, or leave blank to allow all cores. This can be a single number, or a comma seperated list. Example: 0, 0-1,3, or 0,1,3,4.	
     * @param {String} server.feature_limits - Feature limites like: "feature_limits": {"databases": 5,"allocations": 5,"backups": 2}
     * @param {String} server.feature_limits.databases - The total number of databases a user is allowed to create for this server.	
     * @param {String} server.feature_limits.backups - The total number of allocations a user is allowed to create for this server.	
     * @param {String} server.feature_limits.allocations - The total number of allocations a user is allowed to create for this server.	
     * @returns {PTUser} The updated server
     * @throws {Error} Any errors
     */
    updateServerBuild(id, server) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            if (!server || !server.allocation || !server.feature_limits) reject(new Error('Must specifiy an allocation and feature limits.'));
            const url = `${this.url}/api/application/servers/${id}/build`;
            try {
                const resp = await request.patch(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true,
                    body: server
                });
                if (resp.statusCode === 404) reject(new Error('Can\'t update build of non-existant server!'));
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Update startup
     * @async
     * @param {String} - ID of server to update
     * @param {String} server.startup - Edit your server's startup command here.	
     * @param {Object} server.environment - Environment variables that the egg requires/supports			
     * @param {String} server.egg - ID of the egg to use			
     * @param {String} server.image - The Docker image to use for this server		
     * @param {String} server.skip_scripts	 - If enabled, if the Egg has an install script, it will NOT be ran during install.		
     * @returns {PTUser} The updated server
     * @throws {Error} Any errors
     */
    updateServerStartup(id, server) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            if (!server || !server.startup || !server.egg || !server.image) reject(new Error('Must specifiy a startup command, server egg and image.'));
            const url = `${this.url}/api/application/servers/${id}/startup`;
            try {
                const resp = await request.patch(url, {
                    auth: {
                        bearer: this.token
                    },
                    json: true,
                    resolveWithFullResponse: true,
                    body: server
                });
                if (resp.statusCode === 404) reject(new Error('Can\'t update startup of non-existant server!'));
                if (resp.statusCode !== 200) reject(new Error(`Non-200 status code ${resp.statusCode}`));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Creating a new Server
     * @async
     * @param {Object} server -Server to add
     * @param {String} server.name - Name for server
     * @param {String} server.user - User id for server owner
     * @param {String} server.egg - Egg of server
     * @param {String} server.docker_image - Docker image for server
     * @param {String} server.startup - Startup command
     * @param {String} server.environment - Environment
     * @param {String} server.limits - Limits (memory, swap, disk, io, cpu)
     * @param {String} server.feature_limits - Feature limites (databases, backups)
     * @param {String} server.allocation - The allocation
     * @returns {PTUser} New server
     */
    createServer(server) {
        return new Promise(async (resolve, reject) => {
            if (!server || !server.name || !server.user || !server.egg || !server.docker_image || !server.startup || !server.environment || !server.limits || !server.feature_limits || !server.allocation) reject(new Error('You must specify the server\'s required details.'));
            const url = this.url + '/api/application/servers';
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    body: server,
                    json: true,
                    resolveWithFullResponse: true
                });
                if (resp.statusCode === 422) reject(new Error(`Validation error on object ${server}`));
                if (resp.statusCode === 503) reject(new Error('Panel encountered an error while processing the request'));
                if (resp.body.error) reject(new Error(`Error: ${resp.body.error}`));
                resolve(resp.body.id);
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Suspend server
     * @async
     * @param {String} id ID of server to suspend
     * @throws {Error} Any errors that occur
     */
    suspendServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            const url = `${this.url}/api/application/servers/${id}/suspend`;
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Unsuspend server
     * @async
     * @param {String} id ID of server to unsuspend
     * @throws {Error} Any errors that occur
     */
    unsuspendServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            const url = `${this.url}/api/application/servers/${id}/unsuspend`;
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Reinstall server
     * @async
     * @param {String} id ID of server to reinstall
     * @throws {Error} Any errors that occur
     */
    reinstallServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            const url = `${this.url}/api/application/servers/${id}/reinstall`;
            try {
                const resp = await request.post(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }
    /**
     * Delete a server
     * @async
     * @param {String} id ID of server to delete
     * @throws {Error} Any errors that occur
     */
    deleteServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            const url = `${this.url}/api/application/servers/${id}`;
            try {
                const resp = await request.delete(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    /**
     * Force delete a server
     * @async
     * @param {String} id ID of server to delete
     * @throws {Error} Any errors that occur
     */
    forceDeleteServer(id) {
        return new Promise(async (resolve, reject) => {
            if (!id) reject(new Error('Must specifiy a server ID'));
            const url = `${this.url}/api/application/servers/${id}/force`;
            try {
                const resp = await request.delete(url, {
                    auth: {
                        bearer: this.token
                    },
                    resolveWithFullResponse: true
                });
                if (resp.statusCode !== 204) reject(new Error(`Got a non-204 response: ${resp.statusCode}`));
                resolve();
            } catch (e) {
                reject(e);
            }
        });
    }

    // Nest related functions
    getNests() {
        return new Promise(async (resolve, reject) => {
            const url = this.url
        });
    }
}

module.exports = pterodactylApi;